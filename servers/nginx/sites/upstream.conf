# 轮询（weight=1）————如果后端服务器down掉，自动剔除
# 作用域————http
#
# 设备状态设置
# weight————指定轮询几率（访问比率）————用于后端服务器性能不均的情况，默认相等
# down————当前server暂时不参与负载
# max_fails————允许请求失败的次数，默认为1————超过最大次数，返回proxy_next_upstream模块定义的错误
# fail_timeout————max_fails次失败后，暂停的时间
# backup————其它所有的非backup机器down或者忙的时候，请求backup机器，所以这台机器压力会最轻
# nginx支持同时设置多组的负载均衡，用来给不用的server来使用
#
#
#
# 默认每个请求按时间顺序（默认）逐一分配到不同的后端服务器
# backend————自定义，对应server location里的proxy_pass http://backend;
upstream default_bakend {
    #定义负载均衡设备的Ip及设备状态
    server 192.168.0.14:10086 weight=10;
    server 192.168.0.14:10088 weight=5;
    server 192.168.0.14:10099 backup;
    server 192.168.0.15 down;
}
#
# fair（第三方）————按后端服务器的响应时间来分配请求，响应时间短的优先分配
upstream fair_bakend {
    server server1;
    server server2;
    fair;
}
#
# ip_hash————按访问ip的hash结果分配请求————每个访客固定访问一个后端服务器
# 可以解决session不能跨服务器的问题
# ip_hash要求nginx一定是最前端的服务器，否则nginx得不到正确ip
upstream ip_hash_bakend {
    ip_hash;
    server 192.168.0.14:10086;
    server 192.168.0.15:10086;
}

#
# url_hash（第三方）————按访问url的hash结果来分配请求
# 使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效
# （server语句中不能写入weight等其他的参数，hash_method是使用的hash算法）
upstream url_hash_backend {
    server squid1:3128;
    server squid2:3128;
    hash $request_uri;
    hash_method crs32;
}