# Nginx用户 组（Linux）
user nobody nobody;
#
# 工作进程数目————CPU数量*1~2
worker_processes 1;
#
# 错误日志路径 级别
# error_log logs/error.log notice;
#
# 一个进程可以打开的最多文件描述符数目
# 理论值————ulimit -n/worker_processes
# linux 2.6内核下开启文件打开数为65535
# nginx分配请求并不是那么均匀
# 并发量超过，返回502错误
# worker_rlimit_nofile 65535;
#
# pid（进程标识符）路径
#
pid logs/nginx.pid;
#
# include————包含另一个配置文件，与直接写在nginx.conf中等效
# sites————/usr/local/nginx/conf/sites/
#
# events模块————包含nginx中所有处理连接的设置
events {
    # I/O模型（window不指定）
    #
    # 标准事件模型（如果系统不存在更有效的方法）
    # select、poll
    #
    # 高效事件模型
    # kqueue————FreeBSD 4.1+、OpenBSD 2.9+、NetBSD 2.0、MacOS X
    #  epoll————Linux内核2.6版本及以后的系统
    # /dev/poll————Solaris 7 11/99+、HP/UX 11.22+ (eventport)、IRIX 6.5.15+、Tru64 UNIX 5.1A+
    # eventport————Solaris 10————为了防止出现内核崩溃的问题，有必要安装安全补丁
    use epolls;
    #
    # 每个工作进程的最大连接数量————尽量大，但是别把cpu跑到100%
    # 理论上每台nginx服务器的最大连接数————worker_processes*worker_connections
    worker_connections  1024;
    #
    # 收到一个新连接通知后接受尽可能多的连接
    # multi_accept on;

    # cat /proc/version————查看linux版本号
}
#
# 设定http服务器
http {
    # 加载一系列的MIME类型
    include mime.types;
    #
    # 默认MIME-type
    default_type application/octet-stream;
    #
    # 自定义日志格式（不能写在server中）
    log_format htaccesslog '[$time_local] $status $remote_addr $http_x_forwarded_for'
                           '"$cookie_corp_sign" $host "$request" '
                           '"$http_referer" "$http_user_agent" $body_bytes_sent';

    log_format main '$remote_addr - $remote_user [$time_local] '
                    'fwf[$http_x_forwarded_for] tip[$http_true_client_ip] '
                    '$upstream_addr $upstream_response_time $request_time '
                    '$geoip_country_code '
                    '$http_host $request '
                    '"$status" $body_bytes_sent "$http_referer" '
                    '"$http_accept_language" "$http_user_agent" ';
    #
    # 是否存储访问日志，关闭它可以让磁盘IO操作更快
    access_log off;
    #
    # 错误日志路径 级别
    error_log /var/log/nginx.log error;
    #
    # 隐藏错误页面中的nginx版本数字
    server_tokens off;
    #-----------------------------------------------------------------------------------------------
    include sites/efficiency.conf;
    include sites/file_send.conf;
    include sites/client.conf;
    #------------------------------------------------------------------------------------server_name
    # server_names_hash_max_size、server_names_hash_bucket_size————控制保存服务器名字的hash表
    # max_size————hash表bucket的size上限
    # bucket_size————每个bucket大小————等于CPU缓存的整数倍————在内存中查找键，最多找2次
    # 第一次是确定存储单元的地址，第二次是在存储单元中查找键值，减少在内存中的存取次数，加速hash表键值查找
    #
    # bucket————盛放一定数量的value（ngx_hash_elt_t）、name（***.com）、len（size）
    # 每个元素的hash值长度是确定的，size是不确定的
    # 拥有相同hash％size的元素放在同一个bucket中
    # 如果bucket_size过小，server_name又比较长，那么bucket是不能存下一个元素的
    server_names_hash_max_size 512;
    server_names_hash_bucket_size 256;
    #-----------------------------------------------------------------------------------------------
    add_header fz crm2;
    include sites/upstream.conf;
    include sites/server.conf;
}
