# 客户端请求头的缓冲区大小
# 设置为系统分页大小（getconf PAGESIZE）或者其整数倍
client_header_buffer_size 4096k;
#
# 客户请求头缓冲大小
# nginx默认会用client_header_buffer_size这个buffer来读取header值
# 如果header过大，它会使用large_client_header_buffers来读取
large_client_header_buffers 4 256k;
#
# 如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。
# 默认是操作系统页面大小的两倍————8k或者16k，此时无论使用firefox4.0还是IE8.0，提交一个比较大————200k左右的图片，都返回500 Internal Server Error错误
client_body_buffer_size 256k;
#
# 请求头和请求体的超时时间
client_header_timeout 3m;
client_body_timeout 3m;
#
# 客户端的响应超时时间
# 如果在两次客户端读取操作之间，客户端没有读取任何数据，nginx就会关闭连接
send_timeout 3m;
#
# 通过nginx上传文件的大小
client_max_body_size 300m;
#
# 客户端keep-alive链接超时时间，服务器将在这个超时时间过后关闭链接
# 将它设置低些可以让ngnix持续工作的时间更长
keepalive_timeout 120;
#
# 关闭链接超时的客户端后释放那个客户端所占有的内存空间
reset_timedout_connection on;
#
# 设置用于保存各种key的共享内存的参数
# $binary_remote_addr————限制同一客户端ip地址最大并发数
# $server_name————限制同一server最大并发数
#
# zone=————key（容器名，随便起），跟 limit_conn 一致
# 用二进制来储存客户端的地址，1m 可以储存 32000 个并发会话
limit_conn_zone $binary_remote_addr zone=client_addr:5m;
limit_conn_zone $server_name zone=perserver:10m;
#
# 为给定的key设置最大限制并发连接数
limit_conn client_addr 100;
limit_conn perserver 20;
#
# 对每个连接限速
limit_rate 100k;