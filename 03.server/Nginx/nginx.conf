# Nginx用户 组（window下不指定）
# user nginx nginx;

# 工作进程数目。根据硬件调整，通常等于CPU数量或者2倍于CPU。
worker_processes 8;
# 错误日志存放路径。
error_log  logs/error.log;  
error_log  logs/error.log  notice;  
error_log  logs/error.log  info;  
# pid（进程标识符）存放路径。
pid logs/nginx.pid;
# 指定进程可以打开的最大描述符：数目。
# 这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。
# 现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。
worker_rlimit_nofile 204800;



# events模块中包含nginx中所有处理连接的设置。
events
{
# 使用epoll的I/O 模型。linux建议epoll，FreeBSD建议采用kqueue，window下不指定。
# 与apache相类，nginx针对不同的操作系统，有不同的事件模型
# A）标准事件模型（Select、poll），如果当前系统不存在更有效的方法，nginx会选择select或poll
# B）高效事件模型
# Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。
# Epoll：使用于Linux内核2.6版本及以后的系统。
# /dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。
# Eventport：使用于Solaris 10。为了防止出现内核崩溃的问题，有必要安装安全补丁。
    use epoll;  
# 每个工作进程的最大连接数量。根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。理论上每台nginx服务器的最大连接数为worker_processes*worker_connections
    worker_connections 204800;
# 收到一个新连接通知后接受尽可能多的连接。
    multi_accept on;
}
 
 

# 设定http服务器，利用它的反向代理功能提供负载均衡支持。
http
{
# =================================================================================================
    # 关闭错误页面中的nginx版本数字，这样对于安全性是有好处的。
    server_tokens off;
    # 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。
    sendfile on;
    # 允许或禁止使用socke的TCP_CORK的选项（在一个数据包里发送所有头文件，而不一个接一个的发送），此选项仅在使用sendfile的时候使用。
    tcp_nopush on;
    # 不要缓存数据，而是一段一段的发送————当需要及时发送数据时，就应该给应用设置这个属性，这样发送一小块数据信息时就不能立即得到返回值。
    tcp_nodelay on;
# =================================================================================================
    # 是将存储访问日志。关闭这个选项可以让读取磁盘IO操作更快(aka,YOLO)。
    access_log off;
    # 记录严重的错误。
    error_log /var/log/nginx/error.log crit;
# =================================================================================================
    # 客户端keep-alive链接超时时间。服务器将在这个超时时间过后关闭链接。将它设置低些可以让ngnix持续工作的时间更长。
    keepalive_timeout 120;
    # 请求头和请求体(各自)的超时时间。
    client_header_timeout 10;
    client_body_timeout 10;
    # 关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间。
    reset_timedout_connection on;
    # 客户端的响应超时时间。这个设置不会用于整个转发器，而是在两次客户端读取操作之间。如果在这段时间内，客户端没有读取任何数据，nginx就会关闭连接。
    send_timeout 10;
# =================================================================================================
    # limit_conn为给定的key设置最大连接数。这里key是addr，我们设置的值是100，也就是说我们允许每一个IP地址最多同时打开有100个连接。
    limit_conn addr 100;
    # limit_conn_zone设置用于保存各种key（比如当前连接数）的共享内存的参数。5m就是5兆字节，这个值应该被设置的足够大以存储（32K*5）32byte状态或者（16K*5）64byte状态。
    limit_conn_zone $binary_remote_addr zone=addr:5m;
# =================================================================================================
    # 在当前文件中包含另一个文件内容。使用它来加载一系列的MIME类型。
    include /etc/nginx/mime.types;
    # 设置文件使用的默认的MIME-type。
    default_type text/html;
    #default_type application/octet-stream;
    # 设置头文件中的默认的字符集。
    charset UTF-8;
# =================================================================================================
    # 用gzip压缩的形式发送数据，减少发送的数据量。
    gzip  on;
    # 为指定的客户端禁用gzip功能。MSIE[1-6]，IE1~IE6
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";
    # 在压缩资源之前，先查找是否有预先gzip处理过的资源。这要求你预先压缩你的文件，从而允许你使用最高压缩比，这样nginx就不用再压缩这些文件了。
    gzip_static on
# gzip_proxied允许或者禁止压缩基于请求和响应的响应流。any，意味着将会压缩所有的请求。
    gzip_proxied any;
    # gzip_min_length设置对数据启用压缩的最少字节数。如果一个请求小于1000字节，我们最好不要压缩它，因为压缩这些小的数据会降低处理此请求的所有进程的速度。
    gzip_min_length 1000;
    # gzip_comp_level设置数据的压缩等级。这个等级可以是1-9之间的任意数值，9是最慢但是压缩比最大的。
    gzip_comp_level 4;
    # gzip_type设置需要压缩的数据格式。
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml+rss text/javascript;
# =================================================================================================
    # 为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。 
    open_file_cache max=65535 inactive=60s;
    # 多长时间检查一次缓存的有效信息。默认值：60。
    open_file_cache_valid 80s;
    # open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。默认值：1。
    open_file_cache_min_uses 1; 
    # 是否在搜索一个文件时记录cache错误（on|off），默认值：off。
    open_file_cache_errors on;


    # 日志格式设置。
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                '$status $body_bytes_sent "$http_referer" '
                '"$http_user_agent" "$http_x_forwarded_for"';
    log_format log404 '$status [$time_local] $remote_addr $host$request_uri $sent_http_location';
    # $remote_addr、$http_x_forwarded_for：用来记录客户端的ip地址；
    # $remote_user：用来记录客户端用户名称；
    # $time_local： 用来记录访问时间与时区；
    # $request： 用来记录请求的url与http协议；
    # $status： 用来记录请求状态；成功是200，
    # $body_bytes_sent ：记录发送给客户端文件主体内容大小；
    # $http_referer：用来记录从那个页面链接访问过来的；
    # $http_user_agent：记录客户浏览器的相关信息；
    # 通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。

    # 配置虚拟机
    server
    {
        # 配置访问域名。 default_server————如果有其他 http 请求的 host 在 nginx 中不存在的话，那么就用此 server 的配置来处理。
        server_name servename.com;
        # 配置监听端口（ipv4、ipv6）
        listen 80;
        listen server_name:80  [default_server] ipv6only=on;
        # 将本地的一个文件夹作为所有 url 请求的根路径，比如用户请求 server_name/test, nginx 就会去找 /usr/share/nginx/html/test 文件返回。 
        root /usr/share/nginx/html;
        # index————访问 server_name 时，默认访问页面。自动按顺序寻找 root 文件路径下的 index.html 和 index.htm 将第一个找到的结果返回。 
        index index.html index.htm;
        # 用了log_format指令设置了日志格式之后，需要用access_log指令指定日志文件的存放路径。
        access_log  logs/host.access.log  main;
        access_log  logs/host.access.404.log  log404;
        # 轮询————每个请求按时间顺序（默认）逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。
        # weight————指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。
        upstream bakend {
            server backend1.example.com;
            server backend2.example.com;
            server backend3.example.com;
            server backend4.example.com;
        }
        # 匹配 / 开始的所有请求
        location / {
            # try_files 意思是 nginx 会按照接下来的顺序去访问文件找不到就返回一个404。
            #try_files $uri $uri/ =404;
            # 实现反向代理和负载均衡————转移到真正提供服务的一台机器。
            proxy_pass http://backend;
        }
        # 定义错误提示页面
        error_page   500 502 503 504 /50x.html; 
        location = /50x.html {
            root   /root;
        }
    }

# 客户端请求头的缓冲区大小，可以根据系统分页大小来设置。一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。
# [root@web001 ~]# getconf PAGESIZE————取得分页大小。
# 也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。
    client_header_buffer_size 4k;
# 客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。
    large_client_header_buffers 8 128k;
# 设定通过nginx上传文件的大小。 
    client_max_body_size 300m;
# 如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。默认是操作系统页面大小的两倍，8k或者16k，此时无论使用firefox4.0还是IE8.0，提交一个比较大————200k左右的图片，都返回500 Internal Server Error错误。
    client_body_buffer_size 512k;


# 保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.
    server_names_hash_bucket_size 128;
# 后端服务器连接的超时时间————发起握手等候响应超时时间。
    proxy_connect_timeout 90; 
# 连接成功后，等候后端服务器响应时间————其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）。
    proxy_read_timeout 180;
# 后端服务器数据回传时间————就是在规定时间之内后端服务器必须传完所有的数据。
    proxy_send_timeout 180;
# 设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小。
    proxy_buffer_size 256k;
# 读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k。
    proxy_buffers 4 256k;
    proxy_busy_buffers_size 256k;
# 设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长。
    proxy_temp_file_write_size 256k;
# proxy_temp_path和proxy_cache_path指定的路径必须在同一分区
    proxy_temp_path /data0/proxy_temp_dir;
#设置内存缓存空间大小为200MB，1天没有被访问的内容自动清除，硬盘缓存空间大小为30GB。
    proxy_cache_path /data0/proxy_cache_dir levels=1:2 keys_zone=cache_one:200m inactive=1d max_size=30g;
# 阻止HTTP应答代码为400或者更高的应答。
    proxy_intercept_errors on;
 }

# service nginx reload，不必重启，让nginx配置生效。
